// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eCore.Context;

namespace eCore.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20201112224018_CajaCarteraCuotas")]
    partial class CajaCarteraCuotas
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("eCore.Entities.AccAcciones", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AutorizadoEn")
                        .HasColumnName("autorizado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("AutorizadoPor")
                        .HasColumnName("autorizado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnName("codigo")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnName("creado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasColumnName("creado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnName("descripcion")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Icono")
                        .HasColumnName("icono")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Codigo")
                        .IsUnique()
                        .HasName("uk_acciones");

                    b.ToTable("acc_acciones");
                });

            modelBuilder.Entity("eCore.Entities.AccEventos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Contexto")
                        .HasColumnName("contexto")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("IdAccTipoEvento")
                        .HasColumnName("id_acc_tipo_evento");

                    b.Property<int>("IdAccUsuario")
                        .HasColumnName("id_acc_usuario");

                    b.Property<DateTime>("OcurridoEn")
                        .HasColumnName("ocurrido_en")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("IdAccTipoEvento");

                    b.HasIndex("IdAccUsuario");

                    b.ToTable("acc_eventos");
                });

            modelBuilder.Entity("eCore.Entities.AccGrupos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AutorizadoEn")
                        .HasColumnName("autorizado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("AutorizadoPor")
                        .HasColumnName("autorizado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnName("codigo")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnName("creado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasColumnName("creado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnName("descripcion")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Icono")
                        .HasColumnName("icono")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Codigo")
                        .IsUnique()
                        .HasName("uk_grupos");

                    b.ToTable("acc_grupos");
                });

            modelBuilder.Entity("eCore.Entities.AccGruposXPerfil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AutorizadoEn")
                        .HasColumnName("autorizado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("AutorizadoPor")
                        .HasColumnName("autorizado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnName("creado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasColumnName("creado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int>("IdAccGrupo")
                        .HasColumnName("id_acc_grupo");

                    b.Property<int>("IdAccPerfil")
                        .HasColumnName("id_acc_perfil");

                    b.HasKey("Id");

                    b.HasIndex("IdAccGrupo");

                    b.HasIndex("IdAccPerfil", "IdAccGrupo")
                        .IsUnique()
                        .HasName("uk_grupos_x_perfil");

                    b.ToTable("acc_grupos_x_perfil");
                });

            modelBuilder.Entity("eCore.Entities.AccModulos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AutorizadoEn")
                        .HasColumnName("autorizado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("AutorizadoPor")
                        .HasColumnName("autorizado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnName("codigo")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnName("creado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasColumnName("creado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnName("descripcion")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Icono")
                        .HasColumnName("icono")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int?>("IdAccModulo")
                        .HasColumnName("id_acc_modulo");

                    b.HasKey("Id");

                    b.HasIndex("Codigo")
                        .IsUnique()
                        .HasName("uk_modulos");

                    b.HasIndex("IdAccModulo");

                    b.ToTable("acc_modulos");
                });

            modelBuilder.Entity("eCore.Entities.AccPerfiles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AutorizadoEn")
                        .HasColumnName("autorizado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("AutorizadoPor")
                        .HasColumnName("autorizado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnName("codigo")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnName("creado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasColumnName("creado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnName("descripcion")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Icono")
                        .HasColumnName("icono")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Codigo")
                        .IsUnique()
                        .HasName("uk_perfiles");

                    b.ToTable("acc_perfiles");
                });

            modelBuilder.Entity("eCore.Entities.AccProgramas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AutorizadoEn")
                        .HasColumnName("autorizado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("AutorizadoPor")
                        .HasColumnName("autorizado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnName("codigo")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnName("creado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasColumnName("creado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnName("descripcion")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Entidad")
                        .HasColumnName("entidad")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Icono")
                        .HasColumnName("icono")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Objeto")
                        .HasColumnName("objeto")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Parametros")
                        .HasColumnName("parametros")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Codigo")
                        .IsUnique()
                        .HasName("uk_programas");

                    b.ToTable("acc_programas");
                });

            modelBuilder.Entity("eCore.Entities.AccProgramasAcciones", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AutorizadoEn")
                        .HasColumnName("autorizado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("AutorizadoPor")
                        .HasColumnName("autorizado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnName("creado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasColumnName("creado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Icono")
                        .HasColumnName("icono")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("IdAccAccion")
                        .HasColumnName("id_acc_accion");

                    b.Property<int>("IdAccPrograma")
                        .HasColumnName("id_acc_programa");

                    b.Property<string>("Origen")
                        .HasColumnName("origen")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("IdAccAccion");

                    b.HasIndex("IdAccPrograma", "IdAccAccion", "Origen")
                        .IsUnique()
                        .HasName("uk_programas_acciones")
                        .HasFilter("[origen] IS NOT NULL");

                    b.ToTable("acc_programas_acciones");
                });

            modelBuilder.Entity("eCore.Entities.AccProgramasAccionesXGrupo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AutorizadoEn")
                        .HasColumnName("autorizado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("AutorizadoPor")
                        .HasColumnName("autorizado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnName("creado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasColumnName("creado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Icono")
                        .HasColumnName("icono")
                        .HasColumnType("text");

                    b.Property<int>("IdAccGrupo")
                        .HasColumnName("id_acc_grupo");

                    b.Property<int>("IdProgramaAccion")
                        .HasColumnName("id_programa_accion");

                    b.HasKey("Id");

                    b.HasIndex("IdProgramaAccion");

                    b.HasIndex("IdAccGrupo", "IdProgramaAccion")
                        .IsUnique()
                        .HasName("uk_programas_acciones_x_grupo");

                    b.ToTable("acc_programas_acciones_x_grupo");
                });

            modelBuilder.Entity("eCore.Entities.AccProgramasFavoritosXUsuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnName("creado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasColumnName("creado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int>("IdAccPrograma")
                        .HasColumnName("id_acc_programa");

                    b.Property<int>("IdAccUsuario")
                        .HasColumnName("id_acc_usuario");

                    b.HasKey("Id");

                    b.HasIndex("IdAccUsuario");

                    b.HasIndex("IdAccPrograma", "IdAccUsuario")
                        .IsUnique()
                        .HasName("uk_acc_programas_favoritos_x_usuario");

                    b.ToTable("acc_programas_favoritos_x_usuario");
                });

            modelBuilder.Entity("eCore.Entities.AccProgramasRecientesXUsuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Fecha")
                        .HasColumnName("fecha")
                        .HasColumnType("datetime");

                    b.Property<int>("IdAccPrograma")
                        .HasColumnName("id_acc_programa");

                    b.Property<int>("IdAccUsuario")
                        .HasColumnName("id_acc_usuario");

                    b.HasKey("Id");

                    b.HasIndex("IdAccPrograma");

                    b.HasIndex("IdAccUsuario");

                    b.ToTable("acc_programas_recientes_x_usuario");
                });

            modelBuilder.Entity("eCore.Entities.AccProgramasXModulos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AutorizadoEn")
                        .HasColumnName("autorizado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("AutorizadoPor")
                        .HasColumnName("autorizado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnName("creado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasColumnName("creado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Icono")
                        .HasColumnName("icono")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("IdAccModulo")
                        .HasColumnName("id_acc_modulo");

                    b.Property<int>("IdAccPrograma")
                        .HasColumnName("id_acc_programa");

                    b.HasKey("Id");

                    b.HasIndex("IdAccModulo");

                    b.HasIndex("IdAccPrograma", "IdAccModulo")
                        .IsUnique()
                        .HasName("uk_programas_x_modulos");

                    b.ToTable("acc_programas_x_modulos");
                });

            modelBuilder.Entity("eCore.Entities.AccProgramasXUsuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnName("creado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasColumnName("creado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int>("IdAccPrograma")
                        .HasColumnName("id_acc_programa");

                    b.Property<int>("IdAccUsuario")
                        .HasColumnName("id_acc_usuario");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnName("tipo")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("IdAccUsuario");

                    b.HasIndex("IdAccPrograma", "IdAccUsuario")
                        .IsUnique()
                        .HasName("uk_programas_x_usuario");

                    b.ToTable("acc_programas_x_usuario");
                });

            modelBuilder.Entity("eCore.Entities.AccTiposEventos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AutorizadoEn")
                        .HasColumnName("autorizado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("AutorizadoPor")
                        .HasColumnName("autorizado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnName("codigo")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnName("creado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasColumnName("creado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnName("descripcion")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Icono")
                        .HasColumnName("icono")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnName("tipo")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Codigo")
                        .IsUnique()
                        .HasName("uk_eventos");

                    b.ToTable("acc_tipos_eventos");
                });

            modelBuilder.Entity("eCore.Entities.AccUsuarios", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdCuenta")
                        .IsRequired()
                        .HasColumnName("ad_cuenta")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnName("apellido")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime?>("AutorizadoEn")
                        .HasColumnName("autorizado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("AutorizadoPor")
                        .HasColumnName("autorizado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int>("Bloqueado")
                        .HasColumnName("bloqueado");

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnName("creado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasColumnName("creado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int>("IdAccPerfil")
                        .HasColumnName("id_acc_perfil");

                    b.Property<int>("MaxCantidadConexiones")
                        .HasColumnName("max_cantidad_conexiones");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasColumnName("nombres")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("SecurityIdentifier")
                        .IsRequired()
                        .HasColumnName("security_identifier")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Sucursal")
                        .IsRequired()
                        .HasColumnName("sucursal")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UltimaConexion")
                        .HasColumnName("ultima_conexion")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AdCuenta")
                        .IsUnique()
                        .HasName("uk_ad_cuenta");

                    b.HasIndex("IdAccPerfil");

                    b.HasIndex("SecurityIdentifier")
                        .IsUnique()
                        .HasName("uk_security_identifier");

                    b.ToTable("acc_usuarios");
                });

            modelBuilder.Entity("eCore.Entities.AccUsuariosSesiones", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnName("creado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("Eventos")
                        .HasColumnName("eventos")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FinalizaEn")
                        .HasColumnName("finaliza_en")
                        .HasColumnType("datetime");

                    b.Property<int>("IdAccUsuario")
                        .HasColumnName("id_acc_usuario");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnName("token")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UltimaConexion")
                        .HasColumnName("ultima_conexion")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("IdAccUsuario");

                    b.ToTable("acc_usuarios_sesiones");
                });

            modelBuilder.Entity("eCore.Entities.AllianzCarteraDet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CantCuotas")
                        .HasColumnName("cant_cuotas");

                    b.Property<int>("CantCuotas2")
                        .HasColumnName("cant_cuotas2");

                    b.Property<int>("CantDenuncias")
                        .HasColumnName("cant_denuncias");

                    b.Property<int>("CantSiniestros")
                        .HasColumnName("cant_siniestros");

                    b.Property<string>("Chasis")
                        .HasColumnName("chasis")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("ClaseEndoso")
                        .HasColumnName("clase_endoso")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Cobertura")
                        .HasColumnName("cobertura")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<decimal>("ComisionOrg")
                        .HasColumnName("comision_org")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<decimal>("ComisionProd")
                        .HasColumnName("comision_prod")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<string>("Cuatrimestre")
                        .HasColumnName("cuatrimestre")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<decimal>("DerechoEmision")
                        .HasColumnName("derecho_emision")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<int>("Endoso")
                        .HasColumnName("endoso");

                    b.Property<string>("Estado")
                        .HasColumnName("estado")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("EstadoSolicitud")
                        .HasColumnName("estado_solicitud")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime>("FecEmision")
                        .HasColumnName("fec_emision")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaDesdeVigencia")
                        .HasColumnName("fecha_desde_vigencia")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaDespImp")
                        .HasColumnName("fecha_desp_imp")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaFinPrestamo")
                        .HasColumnName("fecha_fin_prestamo")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaHastaVigencia")
                        .HasColumnName("fecha_hasta_vigencia")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaVtoPoliza")
                        .HasColumnName("fecha_vto_poliza")
                        .HasColumnType("datetime");

                    b.Property<string>("FormaDeCobro")
                        .HasColumnName("forma_de_cobro")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<decimal>("GastosAdm")
                        .HasColumnName("gastos_adm")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<decimal>("GastosFinanc")
                        .HasColumnName("gastos_financ")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<int>("IdAllianzCarteraEnc")
                        .HasColumnName("id_allianz_cartera_enc");

                    b.Property<decimal>("Infoauto")
                        .HasColumnName("infoauto")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<int>("Item")
                        .HasColumnName("item");

                    b.Property<decimal>("Iva")
                        .HasColumnName("iva")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<string>("Linea")
                        .HasColumnName("linea")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Marca")
                        .HasColumnName("marca")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Modelo")
                        .HasColumnName("modelo")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Moneda")
                        .HasColumnName("moneda")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Motor")
                        .HasColumnName("motor")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("NombreDelAsegurado")
                        .HasColumnName("nombre_del_asegurado")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<decimal>("NroInterno")
                        .HasColumnName("nro_interno")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<string>("NumeroDeDocumento")
                        .HasColumnName("numero_de_documento")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Organizador")
                        .HasColumnName("organizador")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Patente")
                        .HasColumnName("patente")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("PlanPago")
                        .HasColumnName("plan_pago")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Poliza")
                        .HasColumnName("poliza")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("PolizaRenovada")
                        .HasColumnName("poliza_renovada")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<decimal>("Porc1erCuota")
                        .HasColumnName("porc_1er_cuota")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<string>("Productor")
                        .HasColumnName("productor")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Propuesta")
                        .HasColumnName("propuesta")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<decimal>("Saldo")
                        .HasColumnName("saldo")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<string>("Seccion")
                        .HasColumnName("seccion")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<decimal>("Sellos")
                        .HasColumnName("sellos")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<decimal>("SumaAsegurada")
                        .HasColumnName("suma_asegurada")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<decimal>("SumaAsegurada2")
                        .HasColumnName("suma_asegurada2")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<string>("TipoDeDocumento")
                        .HasColumnName("tipo_de_documento")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("TipoOperacion")
                        .HasColumnName("tipo_operacion")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("TipoPoliza")
                        .HasColumnName("tipo_poliza")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<decimal>("TotalPagado")
                        .HasColumnName("total_pagado")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<decimal>("TotalPremio")
                        .HasColumnName("total_premio")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<decimal>("TotalPrima")
                        .HasColumnName("total_prima")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<string>("Uso")
                        .HasColumnName("uso")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<decimal>("ValorDeReferencia")
                        .HasColumnName("valor_de_referencia")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<decimal>("ValorDeReferencia2")
                        .HasColumnName("valor_de_referencia2")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<int>("Venc1eraCuota")
                        .HasColumnName("venc_1era_cuota");

                    b.HasKey("Id");

                    b.HasIndex("IdAllianzCarteraEnc");

                    b.ToTable("allianz_cartera_det");
                });

            modelBuilder.Entity("eCore.Entities.AllianzCarteraEnc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Archivo")
                        .HasColumnName("archivo")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime>("FechaProceso")
                        .HasColumnName("fecha_proceso")
                        .HasColumnType("datetime");

                    b.Property<string>("Usuario")
                        .HasColumnName("usuario")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("allianz_cartera_enc");
                });

            modelBuilder.Entity("eCore.Entities.AllianzComisionesDet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Asegurado")
                        .HasColumnName("asegurado")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<decimal>("ComisionesDevengadas")
                        .HasColumnName("comisiones_devengadas")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<decimal>("ComisionesDevengadasPesos")
                        .HasColumnName("comisiones_devengadas_pesos")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<int>("Endoso")
                        .HasColumnName("endoso");

                    b.Property<string>("FPago")
                        .HasColumnName("f_pago")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime>("Fecha")
                        .HasColumnName("fecha")
                        .HasColumnType("datetime");

                    b.Property<decimal>("IBAgente")
                        .HasColumnName("ib_agente")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<decimal>("IBRiesgo")
                        .HasColumnName("ib_riesgo")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<int>("IdAllianzComisionesEnc")
                        .HasColumnName("id_allianz_comisiones_enc");

                    b.Property<string>("Mda")
                        .HasColumnName("mda")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<decimal>("NetoAcreditado")
                        .HasColumnName("neto_acreditado")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<decimal>("NetoAcreditadoPesos")
                        .HasColumnName("neto_acreditado_pesos")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<string>("NroPoliza")
                        .HasColumnName("nro_poliza")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<decimal>("OSSEG")
                        .HasColumnName("osseg")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<string>("Organizador")
                        .HasColumnName("organizador")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<decimal>("Premio")
                        .HasColumnName("premio")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<decimal>("Prima")
                        .HasColumnName("prima")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<string>("Productor")
                        .HasColumnName("productor")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("ProvinciaRiesgo")
                        .HasColumnName("Provincia_riesgo")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Seccion")
                        .HasColumnName("seccion")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Tipo")
                        .HasColumnName("tipo")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("TipoCambio")
                        .HasColumnName("tipo_cambio");

                    b.HasKey("Id");

                    b.HasIndex("IdAllianzComisionesEnc");

                    b.ToTable("allianz_comisiones_det");
                });

            modelBuilder.Entity("eCore.Entities.AllianzComisionesEnc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Archivo")
                        .HasColumnName("archivo")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime>("FechaProceso")
                        .HasColumnName("fecha_proceso")
                        .HasColumnType("datetime");

                    b.Property<string>("Usuario")
                        .HasColumnName("usuario")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("allianz_comisiones_enc");
                });

            modelBuilder.Entity("eCore.Entities.CajaCarteraAccesorio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Codigo")
                        .HasColumnName("codigo");

                    b.Property<int>("IdCajaCarteraEnc")
                        .HasColumnName("id_caja_cartera_enc");

                    b.Property<int>("Valor")
                        .HasColumnName("valor");

                    b.HasKey("Id");

                    b.HasIndex("IdCajaCarteraEnc");

                    b.ToTable("caja_cartera_accesorio");
                });

            modelBuilder.Entity("eCore.Entities.CajaCarteraAuto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Chasis")
                        .HasColumnName("chasis")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("ClaseVehiculo")
                        .HasColumnName("clase_vehiculo");

                    b.Property<int>("CodInfoauto")
                        .HasColumnName("cod_infoauto");

                    b.Property<string>("DescMarca")
                        .HasColumnName("desc_marca")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("IdCajaCarteraEnc")
                        .HasColumnName("id_caja_cartera_enc");

                    b.Property<int>("Marca")
                        .HasColumnName("Marca");

                    b.Property<string>("McaCeroKm")
                        .HasColumnName("mca_cero_km")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("Modelo")
                        .HasColumnName("modelo");

                    b.Property<string>("Motor")
                        .HasColumnName("motor")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Patente")
                        .HasColumnName("patente")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<decimal>("SumaAsegurada")
                        .HasColumnName("suma_asegurada")
                        .HasColumnType("decimal(10)");

                    b.Property<int>("TipoVehiculo")
                        .HasColumnName("tipo_vehiculo");

                    b.Property<int>("UsoVehiculo")
                        .HasColumnName("uso_vehiculo");

                    b.HasKey("Id");

                    b.HasIndex("IdCajaCarteraEnc");

                    b.ToTable("caja_cartera_auto");
                });

            modelBuilder.Entity("eCore.Entities.CajaCarteraCliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apellido")
                        .HasColumnName("apellido")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("CodIva")
                        .HasColumnName("cod_iva");

                    b.Property<string>("EstCivil")
                        .HasColumnName("est_civil")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnName("fecha_nacimiento")
                        .HasColumnType("datetime");

                    b.Property<int>("IdCajaCarteraEnc")
                        .HasColumnName("id_caja_cartera_enc");

                    b.Property<string>("Nombre")
                        .HasColumnName("nombre")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<decimal>("NroDocumento")
                        .HasColumnName("nro_documento")
                        .HasColumnType("decimal(10)");

                    b.Property<string>("Sexo")
                        .HasColumnName("sexo")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("TipoDocumento")
                        .HasColumnName("tipo_documento")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("IdCajaCarteraEnc");

                    b.ToTable("caja_cartera_cliente");
                });

            modelBuilder.Entity("eCore.Entities.CajaCarteraCuota", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Comision")
                        .HasColumnName("comision")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<DateTime>("FechaVto")
                        .HasColumnName("fecha_vto")
                        .HasColumnType("datetime");

                    b.Property<int>("IdCajaCarteraEnc")
                        .HasColumnName("id_caja_cartera_enc");

                    b.Property<int>("NumCuota")
                        .HasColumnName("num_cuota");

                    b.Property<decimal>("PorcInflacion")
                        .HasColumnName("porc_inflacion")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<decimal>("Premio")
                        .HasColumnName("premio")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<decimal>("Prima")
                        .HasColumnName("prima")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<string>("Situacion")
                        .HasColumnName("situacion")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("IdCajaCarteraEnc");

                    b.ToTable("caja_cartera_cuota");
                });

            modelBuilder.Entity("eCore.Entities.CajaCarteraCuotas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Comision")
                        .HasColumnName("comision")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<DateTime>("FechaVto")
                        .HasColumnName("fecha_vto")
                        .HasColumnType("datetime");

                    b.Property<int>("IdCajaCarteraEnc")
                        .HasColumnName("id_caja_cartera_enc");

                    b.Property<int>("NumCuota")
                        .HasColumnName("num_cuota");

                    b.Property<decimal>("PorcInflacion")
                        .HasColumnName("porc_inflacion")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<decimal>("Premio")
                        .HasColumnName("premio")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<decimal>("Prima")
                        .HasColumnName("prima")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<string>("Situacion")
                        .HasColumnName("situacion")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("IdCajaCarteraEnc");

                    b.ToTable("caja_cartera_cuotas");
                });

            modelBuilder.Entity("eCore.Entities.CajaCarteraDet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Aglutinador")
                        .HasColumnName("aglutinador")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("CBU")
                        .HasColumnName("cbu")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("CodMon")
                        .HasColumnName("cod_mon");

                    b.Property<int>("CodProd")
                        .HasColumnName("cod_prod");

                    b.Property<int>("Compania")
                        .HasColumnName("compania");

                    b.Property<DateTime>("FechaEmision")
                        .HasColumnName("fecha_emision")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaVencimiento")
                        .HasColumnName("fecha_vencimiento")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaVigencia")
                        .HasColumnName("fecha_vigencia")
                        .HasColumnType("datetime");

                    b.Property<string>("FormaCobro")
                        .HasColumnName("forma_cobro")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("IdCajaCarteraEnc")
                        .HasColumnName("id_caja_cartera_enc");

                    b.Property<string>("Negocio")
                        .HasColumnName("negocio")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<decimal>("NumEnd")
                        .HasColumnName("num_end")
                        .HasColumnType("Decimal(10)");

                    b.Property<decimal>("Numero")
                        .HasColumnName("numero")
                        .HasColumnType("Decimal(10)");

                    b.Property<string>("Observacion")
                        .HasColumnName("observacion")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("PolizaAnterior")
                        .HasColumnName("poliza_anterior")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("Ramo")
                        .HasColumnName("ramo");

                    b.Property<decimal>("Referencia")
                        .HasColumnName("referencia")
                        .HasColumnType("Decimal(10)");

                    b.Property<int>("Seccion")
                        .HasColumnName("seccion");

                    b.Property<string>("Solicitud")
                        .HasColumnName("solicitud")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("IdCajaCarteraEnc");

                    b.ToTable("caja_cartera_det");
                });

            modelBuilder.Entity("eCore.Entities.CajaCarteraEnc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Archivo")
                        .HasColumnName("archivo")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime>("FechaProceso")
                        .HasColumnName("fecha_proceso")
                        .HasColumnType("datetime");

                    b.Property<string>("Usuario")
                        .HasColumnName("usuario")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("caja_cartera_enc");
                });

            modelBuilder.Entity("eCore.Entities.LAccGrupos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Accionsql")
                        .IsRequired()
                        .HasColumnName("accionsql")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<DateTime?>("AutorizadoEn")
                        .HasColumnName("autorizado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("AutorizadoPor")
                        .HasColumnName("autorizado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnName("codigo")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnName("creado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasColumnName("creado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnName("descripcion")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Icono")
                        .HasColumnName("icono")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int?>("IdOrigen")
                        .HasColumnName("id_origen");

                    b.HasKey("Id");

                    b.ToTable("l_acc_grupos");
                });

            modelBuilder.Entity("eCore.Entities.LAccGruposXPerfil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Accionsql")
                        .IsRequired()
                        .HasColumnName("accionsql")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<DateTime?>("AutorizadoEn")
                        .HasColumnName("autorizado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("AutorizadoPor")
                        .HasColumnName("autorizado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnName("creado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasColumnName("creado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int>("IdAccGrupo")
                        .HasColumnName("id_acc_grupo");

                    b.Property<int>("IdAccPerfil")
                        .HasColumnName("id_acc_perfil");

                    b.Property<int?>("IdOrigen")
                        .HasColumnName("id_origen");

                    b.HasKey("Id");

                    b.ToTable("l_acc_grupos_x_perfil");
                });

            modelBuilder.Entity("eCore.Entities.LAccModulos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Accionsql")
                        .IsRequired()
                        .HasColumnName("accionsql")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<DateTime?>("AutorizadoEn")
                        .HasColumnName("autorizado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("AutorizadoPor")
                        .HasColumnName("autorizado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnName("codigo")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnName("creado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasColumnName("creado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnName("descripcion")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Icono")
                        .HasColumnName("icono")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int?>("IdAccModulo")
                        .HasColumnName("id_acc_modulo");

                    b.Property<int?>("IdOrigen")
                        .HasColumnName("id_origen");

                    b.HasKey("Id");

                    b.ToTable("l_acc_modulos");
                });

            modelBuilder.Entity("eCore.Entities.LAccPerfiles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Accionsql")
                        .IsRequired()
                        .HasColumnName("accionsql")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<DateTime?>("AutorizadoEn")
                        .HasColumnName("autorizado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("AutorizadoPor")
                        .HasColumnName("autorizado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnName("codigo")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnName("creado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasColumnName("creado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnName("descripcion")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Icono")
                        .HasColumnName("icono")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int?>("IdOrigen")
                        .HasColumnName("id_origen");

                    b.HasKey("Id");

                    b.ToTable("l_acc_perfiles");
                });

            modelBuilder.Entity("eCore.Entities.LAccProgramas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Accionsql")
                        .IsRequired()
                        .HasColumnName("accionsql")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<DateTime?>("AutorizadoEn")
                        .HasColumnName("autorizado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("AutorizadoPor")
                        .HasColumnName("autorizado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnName("codigo")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnName("creado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasColumnName("creado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnName("descripcion")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Entidad")
                        .HasColumnName("entidad")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Icono")
                        .HasColumnName("icono")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int?>("IdOrigen")
                        .HasColumnName("id_origen");

                    b.Property<string>("Objeto")
                        .HasColumnName("objeto")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Parametros")
                        .HasColumnName("parametros")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("l_acc_programas");
                });

            modelBuilder.Entity("eCore.Entities.LAccUsuarios", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Accionsql")
                        .IsRequired()
                        .HasColumnName("accionsql")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("AdCuenta")
                        .IsRequired()
                        .HasColumnName("ad_cuenta")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnName("apellido")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime?>("AutorizadoEn")
                        .HasColumnName("autorizado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("AutorizadoPor")
                        .HasColumnName("autorizado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int>("Bloqueado")
                        .HasColumnName("bloqueado");

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnName("creado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasColumnName("creado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int>("IdAccPerfil")
                        .HasColumnName("id_acc_perfil");

                    b.Property<int?>("IdOrigen")
                        .HasColumnName("id_origen");

                    b.Property<int>("MaxCantidadConexiones")
                        .HasColumnName("max_cantidad_conexiones");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasColumnName("nombres")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("SecurityIdentifier")
                        .IsRequired()
                        .HasColumnName("security_identifier")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Sucursal")
                        .IsRequired()
                        .HasColumnName("sucursal")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UltimaConexion")
                        .HasColumnName("ultima_conexion")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("l_acc_usuarios");
                });

            modelBuilder.Entity("eCore.Entities.MAccGrupos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AutorizadoEn")
                        .HasColumnName("autorizado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("AutorizadoPor")
                        .HasColumnName("autorizado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnName("codigo")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnName("creado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasColumnName("creado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnName("descripcion")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Icono")
                        .HasColumnName("icono")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("IdOrigen")
                        .HasColumnName("id_origen");

                    b.Property<string>("Modifica")
                        .IsRequired()
                        .HasColumnName("modifica")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("m_acc_grupos");
                });

            modelBuilder.Entity("eCore.Entities.MAccGruposXPerfil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AutorizadoEn")
                        .HasColumnName("autorizado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("AutorizadoPor")
                        .HasColumnName("autorizado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnName("creado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasColumnName("creado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int>("IdAccGrupo")
                        .HasColumnName("id_acc_grupo");

                    b.Property<int>("IdAccPerfil")
                        .HasColumnName("id_acc_perfil");

                    b.Property<int?>("IdOrigen")
                        .HasColumnName("id_origen");

                    b.Property<string>("Modifica")
                        .IsRequired()
                        .HasColumnName("modifica")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("IdAccGrupo");

                    b.HasIndex("IdAccPerfil");

                    b.HasIndex("IdOrigen");

                    b.ToTable("m_acc_grupos_x_perfil");
                });

            modelBuilder.Entity("eCore.Entities.MAccModulos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AutorizadoEn")
                        .HasColumnName("autorizado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("AutorizadoPor")
                        .HasColumnName("autorizado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnName("codigo")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnName("creado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasColumnName("creado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnName("descripcion")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Icono")
                        .HasColumnName("icono")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int?>("IdAccModulo")
                        .HasColumnName("id_acc_modulo");

                    b.Property<int?>("IdOrigen")
                        .HasColumnName("id_origen");

                    b.Property<string>("Modifica")
                        .IsRequired()
                        .HasColumnName("modifica")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("IdAccModulo");

                    b.HasIndex("IdOrigen");

                    b.ToTable("m_acc_modulos");
                });

            modelBuilder.Entity("eCore.Entities.MAccPerfiles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AutorizadoEn")
                        .HasColumnName("autorizado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("AutorizadoPor")
                        .HasColumnName("autorizado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnName("codigo")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnName("creado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasColumnName("creado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnName("descripcion")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Icono")
                        .HasColumnName("icono")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int?>("IdOrigen")
                        .HasColumnName("id_origen");

                    b.Property<string>("Modifica")
                        .IsRequired()
                        .HasColumnName("modifica")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("IdOrigen");

                    b.ToTable("m_acc_perfiles");
                });

            modelBuilder.Entity("eCore.Entities.MAccProgramas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AutorizadoEn")
                        .HasColumnName("autorizado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("AutorizadoPor")
                        .HasColumnName("autorizado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnName("codigo")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnName("creado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasColumnName("creado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnName("descripcion")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Entidad")
                        .HasColumnName("entidad")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Icono")
                        .HasColumnName("icono")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int?>("IdOrigen")
                        .HasColumnName("id_origen");

                    b.Property<string>("Modifica")
                        .IsRequired()
                        .HasColumnName("modifica")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("Objeto")
                        .HasColumnName("objeto")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Parametros")
                        .HasColumnName("parametros")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("IdOrigen");

                    b.ToTable("m_acc_programas");
                });

            modelBuilder.Entity("eCore.Entities.MAccUsuarios", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdCuenta")
                        .IsRequired()
                        .HasColumnName("ad_cuenta")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnName("apellido")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime?>("AutorizadoEn")
                        .HasColumnName("autorizado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("AutorizadoPor")
                        .HasColumnName("autorizado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int>("Bloqueado")
                        .HasColumnName("bloqueado");

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnName("creado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasColumnName("creado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int>("IdAccPerfil")
                        .HasColumnName("id_acc_perfil");

                    b.Property<int?>("IdOrigen")
                        .HasColumnName("id_origen");

                    b.Property<int>("MaxCantidadConexiones")
                        .HasColumnName("max_cantidad_conexiones");

                    b.Property<string>("Modifica")
                        .IsRequired()
                        .HasColumnName("modifica")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasColumnName("nombres")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("SecurityIdentifier")
                        .IsRequired()
                        .HasColumnName("security_identifier")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Sucursal")
                        .IsRequired()
                        .HasColumnName("sucursal")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UltimaConexion")
                        .HasColumnName("ultima_conexion")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("IdAccPerfil");

                    b.HasIndex("IdOrigen");

                    b.ToTable("m_acc_usuarios");
                });

            modelBuilder.Entity("eCore.Entities.NAccGrupos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Accionsql")
                        .IsRequired()
                        .HasColumnName("accionsql")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<DateTime?>("AutorizadoEn")
                        .HasColumnName("autorizado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("AutorizadoPor")
                        .HasColumnName("autorizado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnName("codigo")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnName("creado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasColumnName("creado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnName("descripcion")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Icono")
                        .HasColumnName("icono")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int?>("IdOrigen")
                        .HasColumnName("id_origen");

                    b.HasKey("Id");

                    b.ToTable("n_acc_grupos");
                });

            modelBuilder.Entity("eCore.Entities.NAccGruposXPerfil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Accionsql")
                        .IsRequired()
                        .HasColumnName("accionsql")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<DateTime?>("AutorizadoEn")
                        .HasColumnName("autorizado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("AutorizadoPor")
                        .HasColumnName("autorizado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnName("creado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasColumnName("creado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int>("IdAccGrupo")
                        .HasColumnName("id_acc_grupo");

                    b.Property<int>("IdAccPerfil")
                        .HasColumnName("id_acc_perfil");

                    b.Property<int?>("IdOrigen")
                        .HasColumnName("id_origen");

                    b.HasKey("Id");

                    b.ToTable("n_acc_grupos_x_perfil");
                });

            modelBuilder.Entity("eCore.Entities.NAccModulos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Accionsql")
                        .IsRequired()
                        .HasColumnName("accionsql")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<DateTime?>("AutorizadoEn")
                        .HasColumnName("autorizado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("AutorizadoPor")
                        .HasColumnName("autorizado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnName("codigo")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnName("creado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasColumnName("creado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnName("descripcion")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Icono")
                        .HasColumnName("icono")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int?>("IdAccModulo")
                        .HasColumnName("id_acc_modulo");

                    b.Property<int?>("IdOrigen")
                        .HasColumnName("id_origen");

                    b.HasKey("Id");

                    b.ToTable("n_acc_modulos");
                });

            modelBuilder.Entity("eCore.Entities.NAccPerfiles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Accionsql")
                        .IsRequired()
                        .HasColumnName("accionsql")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<DateTime?>("AutorizadoEn")
                        .HasColumnName("autorizado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("AutorizadoPor")
                        .HasColumnName("autorizado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnName("codigo")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnName("creado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasColumnName("creado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnName("descripcion")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Icono")
                        .HasColumnName("icono")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int?>("IdOrigen")
                        .HasColumnName("id_origen");

                    b.HasKey("Id");

                    b.ToTable("n_acc_perfiles");
                });

            modelBuilder.Entity("eCore.Entities.NAccProgramas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Accionsql")
                        .IsRequired()
                        .HasColumnName("accionsql")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<DateTime?>("AutorizadoEn")
                        .HasColumnName("autorizado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("AutorizadoPor")
                        .HasColumnName("autorizado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnName("codigo")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnName("creado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasColumnName("creado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnName("descripcion")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Entidad")
                        .HasColumnName("entidad")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Icono")
                        .HasColumnName("icono")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int?>("IdOrigen")
                        .HasColumnName("id_origen");

                    b.Property<string>("Objeto")
                        .HasColumnName("objeto")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Parametros")
                        .HasColumnName("parametros")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("n_acc_programas");
                });

            modelBuilder.Entity("eCore.Entities.NAccUsuarios", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Accionsql")
                        .IsRequired()
                        .HasColumnName("accionsql")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("AdCuenta")
                        .IsRequired()
                        .HasColumnName("ad_cuenta")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnName("apellido")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime?>("AutorizadoEn")
                        .HasColumnName("autorizado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("AutorizadoPor")
                        .HasColumnName("autorizado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int>("Bloqueado")
                        .HasColumnName("bloqueado");

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnName("creado_en")
                        .HasColumnType("datetime");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasColumnName("creado_por")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int>("IdAccPerfil")
                        .HasColumnName("id_acc_perfil");

                    b.Property<int?>("IdOrigen")
                        .HasColumnName("id_origen");

                    b.Property<int>("MaxCantidadConexiones")
                        .HasColumnName("max_cantidad_conexiones");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasColumnName("nombres")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("SecurityIdentifier")
                        .IsRequired()
                        .HasColumnName("security_identifier")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Sucursal")
                        .IsRequired()
                        .HasColumnName("sucursal")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UltimaConexion")
                        .HasColumnName("ultima_conexion")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("n_acc_usuarios");
                });

            modelBuilder.Entity("eCore.Entities.TrfDetallePremio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdTrfNovedades")
                        .HasColumnName("id_trf_novedades");

                    b.Property<decimal>("Premio")
                        .HasColumnName("premio")
                        .HasColumnType("decimal(12, 2)");

                    b.HasKey("Id");

                    b.HasIndex("IdTrfNovedades");

                    b.ToTable("trf_detalle_premio");
                });

            modelBuilder.Entity("eCore.Entities.TrfNovedades", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Articulo")
                        .HasColumnName("articulo");

                    b.Property<int>("ArticuloAnt")
                        .HasColumnName("articulo_ant");

                    b.Property<string>("CUIT")
                        .HasColumnName("cuit")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Certificado")
                        .HasColumnName("certificado")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("CertificadoAnt")
                        .HasColumnName("certificado_ant")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("CodigoPostal")
                        .HasColumnName("codigo_postal");

                    b.Property<string>("CondicionIVA")
                        .HasColumnName("condicion_iva")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("CondicionIVAN")
                        .HasColumnName("condicion_ivan");

                    b.Property<string>("DocNumero")
                        .HasColumnName("doc_numero")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("DocTipo")
                        .HasColumnName("doc_tipo");

                    b.Property<string>("Domicilio")
                        .HasColumnName("domicilio")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Empresa")
                        .HasColumnName("empresa")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("EmpresaAnt")
                        .HasColumnName("empresa_ant")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("EstadoPoliza")
                        .HasColumnName("estado_poliza")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("EstadoPolizaN")
                        .HasColumnName("estado_poliza_n")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Moneda")
                        .HasColumnName("moneda")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("RazonSocial")
                        .HasColumnName("razon_social")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("SubCodigoPostal")
                        .HasColumnName("sub_codigo_postal");

                    b.Property<string>("Sucursal")
                        .HasColumnName("sucursal")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("SucursalAnt")
                        .HasColumnName("Sucursal_ant")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("Suplemento")
                        .HasColumnName("suplemento");

                    b.Property<string>("Telefono")
                        .HasColumnName("telefono")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("TelefonoParticular")
                        .HasColumnName("telefono_particular")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("VigenciaDesde")
                        .HasColumnName("vigencia_desde")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("VigenciaHasta")
                        .HasColumnName("vigencia_hasta")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("trf_novedades");
                });

            modelBuilder.Entity("eCore.Entities.TrfRama", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Bonificacion")
                        .HasColumnName("bonificacion")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<decimal>("CuotasSociales")
                        .HasColumnName("cuotas_sociales")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<decimal>("DerechoEmiFijo")
                        .HasColumnName("derecho_emi_fijo")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<decimal>("DerechoEmision")
                        .HasColumnName("derecho_emision")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<decimal>("IIBBEmpresa")
                        .HasColumnName("iibb_empresa")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<decimal>("IIBBPercepcion")
                        .HasColumnName("iibb_percepcion")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<decimal>("IIBBRiesgo")
                        .HasColumnName("iibb_riesgo")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<decimal>("IVA")
                        .HasColumnName("iva")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<decimal>("IVAPercepcion")
                        .HasColumnName("iva_percepcion")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<decimal>("IVARNI")
                        .HasColumnName("iva_rni")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<int>("IdTrfDetallePremio")
                        .HasColumnName("id_trf_detalle_premio");

                    b.Property<decimal>("ImpInternos")
                        .HasColumnName("imp_internos")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<decimal>("LeyEmergVial")
                        .HasColumnName("ley_emerg_vial")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<decimal>("Premio")
                        .HasColumnName("premio")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<decimal>("Prima")
                        .HasColumnName("prima")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<decimal>("PrimaNeta")
                        .HasColumnName("prima_neta")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<decimal>("RecargoAdm")
                        .HasColumnName("recargo_adm")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<decimal>("RecargoFin")
                        .HasColumnName("recargo_fin")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<decimal>("RecuperoGastosAsoc")
                        .HasColumnName("recupero_gastos_asoc")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<decimal>("SelladoEmpresa")
                        .HasColumnName("sellado_empresa")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<decimal>("SelladoRiesgo")
                        .HasColumnName("sellado_riesgo")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<decimal>("ServiciosSociales")
                        .HasColumnName("servicios_sociales")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<decimal>("TasaSSN")
                        .HasColumnName("tasa_ssn")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<int>("rama")
                        .HasColumnName("rama");

                    b.HasKey("Id");

                    b.HasIndex("IdTrfDetallePremio");

                    b.ToTable("trf_rama");
                });

            modelBuilder.Entity("eCore.Entities.TrfSdtcomision", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdTrfNovedades")
                        .HasColumnName("id_trf_novedades");

                    b.Property<decimal>("Monto")
                        .HasColumnName("monto")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<int>("NIVC")
                        .HasColumnName("nivc");

                    b.Property<int>("NIVT")
                        .HasColumnName("nivt");

                    b.Property<decimal>("Porcentaje")
                        .HasColumnName("porcentaje")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<int>("Rama")
                        .HasColumnName("rama");

                    b.HasKey("Id");

                    b.HasIndex("IdTrfNovedades");

                    b.ToTable("trf_sdtcomision");
                });

            modelBuilder.Entity("eCore.Entities.TrfSdtcuota", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Estado")
                        .HasColumnName("estado")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("FechaCancelada")
                        .HasColumnName("fecha_cancelada")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("FechaVtoCuota")
                        .HasColumnName("fecha_vto_cuota")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("IdTrfNovedades")
                        .HasColumnName("id_trf_novedades");

                    b.Property<decimal>("ImporteCuota")
                        .HasColumnName("importe_cuota")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<int>("NumeroCuota")
                        .HasColumnName("numero_cuota");

                    b.HasKey("Id");

                    b.HasIndex("IdTrfNovedades");

                    b.ToTable("trf_sdtcuota");
                });

            modelBuilder.Entity("eCore.Entities.TrfVehiculoDatos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Anio")
                        .HasColumnName("anio");

                    b.Property<int>("CeroKm")
                        .HasColumnName("ceroKm");

                    b.Property<string>("Chasis")
                        .HasColumnName("chasis")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Cobertura")
                        .HasColumnName("cobertura")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Dominio")
                        .HasColumnName("dominio")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("IdTrfNovedades")
                        .HasColumnName("id_trf_novedades");

                    b.Property<string>("Marca")
                        .HasColumnName("marca")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("MarcaIA")
                        .HasColumnName("marcaia");

                    b.Property<string>("Modelo")
                        .HasColumnName("modelo")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("ModeloIA")
                        .HasColumnName("modeloia");

                    b.Property<string>("Motor")
                        .HasColumnName("motor")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Origen")
                        .HasColumnName("origen")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("SubModelo")
                        .HasColumnName("sub_modelo")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("SumaAsegurada")
                        .HasColumnName("suma_asegurada")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Tipo")
                        .HasColumnName("tipo")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("TipoN")
                        .HasColumnName("tipon");

                    b.Property<string>("Uso")
                        .HasColumnName("uso")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("UsoN")
                        .HasColumnName("uson");

                    b.HasKey("Id");

                    b.HasIndex("IdTrfNovedades");

                    b.ToTable("trf_vehiculo_datos");
                });

            modelBuilder.Entity("eCore.Entities.AccEventos", b =>
                {
                    b.HasOne("eCore.Entities.AccTiposEventos", "IdAccTipoEventoNavigation")
                        .WithMany("AccEventos")
                        .HasForeignKey("IdAccTipoEvento")
                        .HasConstraintName("fk_acc_eventos_tipos_eventos");

                    b.HasOne("eCore.Entities.AccUsuarios", "IdAccUsuarioNavigation")
                        .WithMany("AccEventos")
                        .HasForeignKey("IdAccUsuario")
                        .HasConstraintName("fk_acc_eventos_usuarios");
                });

            modelBuilder.Entity("eCore.Entities.AccGruposXPerfil", b =>
                {
                    b.HasOne("eCore.Entities.AccGrupos", "IdAccGrupoNavigation")
                        .WithMany("AccGruposXPerfil")
                        .HasForeignKey("IdAccGrupo")
                        .HasConstraintName("fk_acc_grupos_x_perfil_modulos");

                    b.HasOne("eCore.Entities.AccPerfiles", "IdAccPerfilNavigation")
                        .WithMany("AccGruposXPerfil")
                        .HasForeignKey("IdAccPerfil")
                        .HasConstraintName("fk_acc_grupos_x_perfil_perfiles");
                });

            modelBuilder.Entity("eCore.Entities.AccModulos", b =>
                {
                    b.HasOne("eCore.Entities.AccModulos", "IdAccModuloNavigation")
                        .WithMany("InverseIdAccModuloNavigation")
                        .HasForeignKey("IdAccModulo")
                        .HasConstraintName("fk_menues_padre");
                });

            modelBuilder.Entity("eCore.Entities.AccProgramasAcciones", b =>
                {
                    b.HasOne("eCore.Entities.AccAcciones", "IdAccAccionNavigation")
                        .WithMany("AccProgramasAcciones")
                        .HasForeignKey("IdAccAccion")
                        .HasConstraintName("fk_acc_programas_acciones_acciones");

                    b.HasOne("eCore.Entities.AccProgramas", "IdAccProgramaNavigation")
                        .WithMany("AccProgramasAcciones")
                        .HasForeignKey("IdAccPrograma")
                        .HasConstraintName("fk_acc_programas_acciones_programas");
                });

            modelBuilder.Entity("eCore.Entities.AccProgramasAccionesXGrupo", b =>
                {
                    b.HasOne("eCore.Entities.AccGrupos", "IdAccGrupoNavigation")
                        .WithMany("AccProgramasAccionesXGrupo")
                        .HasForeignKey("IdAccGrupo")
                        .HasConstraintName("fk_acc_programas_acciones_x_grupo_grupo");

                    b.HasOne("eCore.Entities.AccProgramasAcciones", "IdProgramaAccionNavigation")
                        .WithMany("AccProgramasAccionesXGrupo")
                        .HasForeignKey("IdProgramaAccion")
                        .HasConstraintName("fk_acc_programas_acciones_x_grupo_accion");
                });

            modelBuilder.Entity("eCore.Entities.AccProgramasFavoritosXUsuario", b =>
                {
                    b.HasOne("eCore.Entities.AccProgramas", "IdAccProgramaNavigation")
                        .WithMany("AccProgramasFavoritosXUsuario")
                        .HasForeignKey("IdAccPrograma")
                        .HasConstraintName("fk_acc_programas_favoritos_x_usuario_prog");

                    b.HasOne("eCore.Entities.AccUsuarios", "IdAccUsuarioNavigation")
                        .WithMany("AccProgramasFavoritosXUsuario")
                        .HasForeignKey("IdAccUsuario")
                        .HasConstraintName("fk_acc_programas_favoritos_x_usuario_usr");
                });

            modelBuilder.Entity("eCore.Entities.AccProgramasRecientesXUsuario", b =>
                {
                    b.HasOne("eCore.Entities.AccProgramas", "IdAccProgramaNavigation")
                        .WithMany("AccProgramasRecientesXUsuario")
                        .HasForeignKey("IdAccPrograma")
                        .HasConstraintName("fk_acc_programas_recientes_x_usuario_prog");

                    b.HasOne("eCore.Entities.AccUsuarios", "IdAccUsuarioNavigation")
                        .WithMany("AccProgramasRecientesXUsuario")
                        .HasForeignKey("IdAccUsuario")
                        .HasConstraintName("fk_acc_programas_recientes_x_usuario_usr");
                });

            modelBuilder.Entity("eCore.Entities.AccProgramasXModulos", b =>
                {
                    b.HasOne("eCore.Entities.AccModulos", "IdAccModuloNavigation")
                        .WithMany("AccProgramasXModulos")
                        .HasForeignKey("IdAccModulo")
                        .HasConstraintName("fk_acc_modulos_programas_x_modulos");

                    b.HasOne("eCore.Entities.AccProgramas", "IdAccProgramaNavigation")
                        .WithMany("AccProgramasXModulos")
                        .HasForeignKey("IdAccPrograma")
                        .HasConstraintName("fk_acc_programas_x_modulos");
                });

            modelBuilder.Entity("eCore.Entities.AccProgramasXUsuario", b =>
                {
                    b.HasOne("eCore.Entities.AccProgramas", "IdAccProgramaNavigation")
                        .WithMany("AccProgramasXUsuario")
                        .HasForeignKey("IdAccPrograma")
                        .HasConstraintName("fk_acc_programas_x_usuario_prog");

                    b.HasOne("eCore.Entities.AccUsuarios", "IdAccUsuarioNavigation")
                        .WithMany("AccProgramasXUsuario")
                        .HasForeignKey("IdAccUsuario")
                        .HasConstraintName("fk_acc_programas_x_usuario_usr");
                });

            modelBuilder.Entity("eCore.Entities.AccUsuarios", b =>
                {
                    b.HasOne("eCore.Entities.AccPerfiles", "IdAccPerfilNavigation")
                        .WithMany("AccUsuarios")
                        .HasForeignKey("IdAccPerfil")
                        .HasConstraintName("fk_acc_usuarios_perfiles");
                });

            modelBuilder.Entity("eCore.Entities.AccUsuariosSesiones", b =>
                {
                    b.HasOne("eCore.Entities.AccUsuarios", "IdAccUsuarioNavigation")
                        .WithMany("AccUsuariosSesiones")
                        .HasForeignKey("IdAccUsuario")
                        .HasConstraintName("fk_acc_usuarios_sesiones");
                });

            modelBuilder.Entity("eCore.Entities.AllianzCarteraDet", b =>
                {
                    b.HasOne("eCore.Entities.AllianzCarteraEnc", "IdAllianzCarteraEncNavigation")
                        .WithMany("AllianzCarteraDet")
                        .HasForeignKey("IdAllianzCarteraEnc")
                        .HasConstraintName("fk_allianz_cartera_det");
                });

            modelBuilder.Entity("eCore.Entities.AllianzComisionesDet", b =>
                {
                    b.HasOne("eCore.Entities.AllianzComisionesEnc", "IdAllianzComisionesEncNavigation")
                        .WithMany("AllianzComisionesDet")
                        .HasForeignKey("IdAllianzComisionesEnc")
                        .HasConstraintName("fk_allianz_comisiones_det");
                });

            modelBuilder.Entity("eCore.Entities.CajaCarteraAccesorio", b =>
                {
                    b.HasOne("eCore.Entities.CajaCarteraDet", "IdCajaCarteraEncNavigation")
                        .WithMany("CajaCarteraAccesorio")
                        .HasForeignKey("IdCajaCarteraEnc")
                        .HasConstraintName("fk_caja_cartera_accesorio");
                });

            modelBuilder.Entity("eCore.Entities.CajaCarteraAuto", b =>
                {
                    b.HasOne("eCore.Entities.CajaCarteraDet", "IdCajaCarteraEncNavigation")
                        .WithMany("CajaCarteraAuto")
                        .HasForeignKey("IdCajaCarteraEnc")
                        .HasConstraintName("fk_caja_cartera_auto");
                });

            modelBuilder.Entity("eCore.Entities.CajaCarteraCliente", b =>
                {
                    b.HasOne("eCore.Entities.CajaCarteraDet", "IdCajaCarteraEncNavigation")
                        .WithMany("CajaCarteraCliente")
                        .HasForeignKey("IdCajaCarteraEnc")
                        .HasConstraintName("fk_caja_cartera_cliente");
                });

            modelBuilder.Entity("eCore.Entities.CajaCarteraCuota", b =>
                {
                    b.HasOne("eCore.Entities.CajaCarteraDet", "IdCajaCarteraEncNavigation")
                        .WithMany("CajaCarteraCuota")
                        .HasForeignKey("IdCajaCarteraEnc")
                        .HasConstraintName("fk_caja_cartera_cuota");
                });

            modelBuilder.Entity("eCore.Entities.CajaCarteraCuotas", b =>
                {
                    b.HasOne("eCore.Entities.CajaCarteraDet", "IdCajaCarteraEncNavigation")
                        .WithMany("CajaCarteraCuotas")
                        .HasForeignKey("IdCajaCarteraEnc")
                        .HasConstraintName("fk_caja_cartera_cuotas");
                });

            modelBuilder.Entity("eCore.Entities.CajaCarteraDet", b =>
                {
                    b.HasOne("eCore.Entities.CajaCarteraEnc", "IdCajaCarteraEncNavigation")
                        .WithMany("CajaCarteraDet")
                        .HasForeignKey("IdCajaCarteraEnc")
                        .HasConstraintName("fk_caja_cartera_det");
                });

            modelBuilder.Entity("eCore.Entities.MAccGruposXPerfil", b =>
                {
                    b.HasOne("eCore.Entities.AccGrupos", "IdAccGrupoNavigation")
                        .WithMany("MaccGruposXPerfilIdAccGrupoNavigation")
                        .HasForeignKey("IdAccGrupo")
                        .HasConstraintName("fk_m_acc_grupos_x_perfil_grupo")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eCore.Entities.AccPerfiles", "IdAccPerfilNavigation")
                        .WithMany("MaccGruposXPerfilIdAccPerfilNavigation")
                        .HasForeignKey("IdAccPerfil")
                        .HasConstraintName("fk_m_acc_grupos_x_perfil_perfil")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eCore.Entities.AccGruposXPerfil", "IdOrigenNavigation")
                        .WithMany("MAccGruposXPerfilIdOrigenNavigation")
                        .HasForeignKey("IdOrigen")
                        .HasConstraintName("fk_m_acc_grupos_x_perfil_id_origen");
                });

            modelBuilder.Entity("eCore.Entities.MAccModulos", b =>
                {
                    b.HasOne("eCore.Entities.AccModulos", "IdAccModuloNavigation")
                        .WithMany("MAccModulosIdAccModuloNavigation")
                        .HasForeignKey("IdAccModulo")
                        .HasConstraintName("fk_id_acc_modulo");

                    b.HasOne("eCore.Entities.AccModulos", "IdOrigenNavigation")
                        .WithMany("MAccModulosIdOrigenNavigation")
                        .HasForeignKey("IdOrigen")
                        .HasConstraintName("fk_m_acc_modulos");
                });

            modelBuilder.Entity("eCore.Entities.MAccPerfiles", b =>
                {
                    b.HasOne("eCore.Entities.AccPerfiles", "IdOrigenNavigation")
                        .WithMany("MAccPerfiles")
                        .HasForeignKey("IdOrigen")
                        .HasConstraintName("fk_m_acc_perfiles");
                });

            modelBuilder.Entity("eCore.Entities.MAccProgramas", b =>
                {
                    b.HasOne("eCore.Entities.AccProgramas", "IdOrigenNavigation")
                        .WithMany("MAccProgramas")
                        .HasForeignKey("IdOrigen")
                        .HasConstraintName("fk_m_acc_programas");
                });

            modelBuilder.Entity("eCore.Entities.MAccUsuarios", b =>
                {
                    b.HasOne("eCore.Entities.AccPerfiles", "IdAccPerfilNavigation")
                        .WithMany("MAccUsuariosIdAccPerfilNavigation")
                        .HasForeignKey("IdAccPerfil")
                        .HasConstraintName("fk_id_acc_perfil_usuario")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eCore.Entities.AccUsuarios", "IdOrigenNavigation")
                        .WithMany("MAccUsuariosIdOrigenNavigation")
                        .HasForeignKey("IdOrigen")
                        .HasConstraintName("fk_m_acc_perfiles_usuario");
                });

            modelBuilder.Entity("eCore.Entities.TrfDetallePremio", b =>
                {
                    b.HasOne("eCore.Entities.TrfNovedades", "IdTrfNovedadesNavigation")
                        .WithMany("TrfDetallePremio")
                        .HasForeignKey("IdTrfNovedades")
                        .HasConstraintName("fk_detalle_premio_novedades");
                });

            modelBuilder.Entity("eCore.Entities.TrfRama", b =>
                {
                    b.HasOne("eCore.Entities.TrfDetallePremio", "IdTrfDetallePremioNavigation")
                        .WithMany("TrfRama")
                        .HasForeignKey("IdTrfDetallePremio")
                        .HasConstraintName("fk_trf_rama");
                });

            modelBuilder.Entity("eCore.Entities.TrfSdtcomision", b =>
                {
                    b.HasOne("eCore.Entities.TrfNovedades", "IdTrfNovedadesNavigation")
                        .WithMany("TrfSdtcomision")
                        .HasForeignKey("IdTrfNovedades")
                        .HasConstraintName("fk_sdtcomision_novedades");
                });

            modelBuilder.Entity("eCore.Entities.TrfSdtcuota", b =>
                {
                    b.HasOne("eCore.Entities.TrfNovedades", "IdTrfNovedadesNavigation")
                        .WithMany("TrfSdtcuota")
                        .HasForeignKey("IdTrfNovedades")
                        .HasConstraintName("fk_sdtcuota_novedades");
                });

            modelBuilder.Entity("eCore.Entities.TrfVehiculoDatos", b =>
                {
                    b.HasOne("eCore.Entities.TrfNovedades", "IdTrfNovedadesNavigation")
                        .WithMany("TrfVehiculoDatos")
                        .HasForeignKey("IdTrfNovedades")
                        .HasConstraintName("fk_trf_vehiculo_datos");
                });
#pragma warning restore 612, 618
        }
    }
}
